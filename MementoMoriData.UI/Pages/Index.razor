@page "/"
@using System.Text.Json;
@using System.Diagnostics

@inject HttpClient Http;
@inject NavigationManager NavManager

<PageTitle>MementoMori Data</PageTitle>

@if (_isLoading)
{
    <RadzenPanel 
        Style="position: fixed; z-index: 999; width: 100%; height: 100%; top: 0; left: 0; background-color: #8d8e90; opacity: 0.5; align-items: center; justify-content: center;"
    >
        <RadzenProgressBarCircular Value="100" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading</Template>
        </RadzenProgressBarCircular>
    </RadzenPanel>

}
<RadzenLayout>
    <RadzenHeader>
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => _isSideBarExpanded = !_isSideBarExpanded)"/>
                    <RadzenLabel Text="MasterBook"/>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" Reverse="true">
                    <RadzenFormField Text="Language">
                        <RadzenDropDown TValue="string" Data="_languages" Value="SelectedLang" ValueChanged="LanguageChanged"></RadzenDropDown>
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenSidebar Expanded="_isSideBarExpanded">
        <RadzenPanelMenu>
            @foreach (var mb in _masterBooks)
            {
                <RadzenPanelMenuItem Text="@mb" Click="() => MbChanged(mb)" Selected="@(mb == SelectedMasterBook)"/>
            }
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody Style="overflow: hidden">
        <DynamicDataGrid Format="Format" Data="_data" ></DynamicDataGrid>
    </RadzenBody>
</RadzenLayout>

@code{

    [Parameter]
    [SupplyParameterFromQuery(Name = "mb")]
    public string SelectedMasterBook { get; set; } = "ActiveSkillMB";

    [Parameter]
    [SupplyParameterFromQuery(Name = "lang")]
    public string SelectedLang { get; set; } = "ZhTw";

    private Dictionary<string, object?>[]? _data;
    private bool _isSideBarExpanded = true;
    private bool _isLoading = true;

    private List<string> _masterBooks = new();
    private readonly Dictionary<string, Dictionary<string, object?>[]> _masterBookDataCache = new();
    private Dictionary<string, string?> _languageMasterBook = new();

    private readonly List<string> _languages = new()
    {
        "EnUs", "JaJp", "KoKr", "ZhTw"
    };

    private const string path = "https://gh.ddlc.top/https://raw.githubusercontent.com/moonheart/mementomori-masterbook/master/Master";

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await InitMasterCatalog();
        await Task.Yield();
        await LoadTextResources();
        await MbChanged();
        _isLoading = false;
    }
    
    private async Task LoadTextResources()
    {
        var stopwatch = Stopwatch.StartNew();
        // await Task.Yield();
        if (!_languages.Contains(SelectedLang))
        {
            SelectedLang = "ZhTw";
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("lang", SelectedLang));
            // await Task.Yield();
        }
        var mb = $"TextResource{SelectedLang}MB";
        var masterBook = await GetMasterBook(mb);
        if (masterBook == null || masterBook.Length == 0)
        {
            return;
        }

        _languageMasterBook = masterBook.ToDictionary(d => d["StringKey"]?.ToString() ?? "", d => d["Text"]?.ToString());
        Console.WriteLine($"Executed {nameof(LoadTextResources)} in {stopwatch.ElapsedMilliseconds} ms");
    }

    private string? Format(string s)
    {
        if (string.IsNullOrEmpty(s))
        {
            return s;
        }
        if (SelectedMasterBook.StartsWith("TextResource"))
        {
            return s;
        }
        return _languageMasterBook.TryGetValue(s, out var text) ? text : s;
    }

    private async Task MbChanged(string? selectedMb = null)
    {
        var stopwatch = Stopwatch.StartNew();
        _isLoading = true;
        await Task.Yield();

        if (string.IsNullOrEmpty(selectedMb))
        {
            selectedMb = SelectedMasterBook;
        }

        if (!_masterBooks.Contains(selectedMb))
        {
            SelectedMasterBook = "ActiveSkillMB";
            selectedMb = SelectedMasterBook;
        }
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("mb", selectedMb));

        var contentData = await GetMasterBook(selectedMb);
        if (contentData == null || contentData.Length == 0) return;

        _data = contentData;
        _isLoading = false;
        Console.WriteLine($"Executed {nameof(MbChanged)} in {stopwatch.ElapsedMilliseconds} ms");
    }

    private async Task<Dictionary<string, object?>[]?> GetMasterBook(string mb)
    {
        if (!_masterBookDataCache.TryGetValue(mb, out var contentData))
        {
            var url = $"{path}/{mb}.json";
            var content = await Http.GetStringAsync(url);
            contentData = JsonSerializer.Deserialize<Dictionary<string, object?>[]>(content);
            if (contentData != null) _masterBookDataCache.Add(mb, contentData);
        }

        return contentData;
    }

    private async Task InitMasterCatalog()
    {
        var stopwatch = Stopwatch.StartNew();
        var url = $"{path}/master-catalog.json";
        var content = await Http.GetStringAsync(url);
        var contentData = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, object>>>(content);
        if (contentData == null)
        {
            return;
        }

        _masterBooks = contentData["MasterBookInfoMap"].Keys.ToList();
        Console.WriteLine($"Executed {nameof(InitMasterCatalog)} in {stopwatch.ElapsedMilliseconds} ms");
    }

    private async Task LanguageChanged(string lang)
    {
        _isLoading = true;
        SelectedLang = lang;
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("lang", lang));
        await LoadTextResources();
        await MbChanged();
        _isLoading = false;
    }

}