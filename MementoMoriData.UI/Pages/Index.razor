@page "/"
@using System.Text.Json;
@using System.Diagnostics

@inject HttpClient Http;
@inject DialogService DialogService;
@inject NavigationManager NavManager

<PageTitle>MemetoMori Data</PageTitle>

<RadzenLayout>
    <RadzenHeader>
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => _isSideBarExpanded = !_isSideBarExpanded)"/>
                    <RadzenLabel Text="MasterBook"/>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" Reverse="true">
                    <RadzenFormField Text="Language">
                        <RadzenDropDown TValue="string" Data="_languages" Value="SelectedLang" ValueChanged="LanguageChanged"></RadzenDropDown>
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

    </RadzenHeader>
    <RadzenSidebar Expanded="_isSideBarExpanded">
       
        
        <RadzenPanelMenu>
             @if (_isLanguageLoading)
                    {
                        <RadzenPanelMenuItem Text="Loading..."></RadzenPanelMenuItem>            
                    }
            @foreach (var mb in _masterBooks)
            {
                <RadzenPanelMenuItem Text="@mb" Click="() => MbChanged(mb)"/>
            }
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody Style="overflow: hidden">
        <RadzenDataGrid Data="_data"
                        @ref="dataGrid"
                        IsLoading="_isTableLoading"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Advanced"
                        AllowColumnPicking="true"
                        AllowSorting="true"
                        AllowColumnResize="true"
                        Style="height: 100%"
                        VirtualizationOverscanCount="10"
                        AllowVirtualization="true">
            <Columns>
                @foreach (var column in _columns)
                {
                    if (column.Key == "IsIgnore")
                    {
                        continue;
                    }
                    var columnWidth = column.Key switch{
                        "Id" => "100px",
                        "Memo" => "200px",
                        _ => ""
                        };
                    columnWidth = column.Value == _typeLong || column.Value == _typeBool ? "100px" : columnWidth;
                    var enableFilter = column.Key switch{
                        "Id" => false,
                        _ => true
                        };
                    var showZoomIn = column.Value != _typeBool && column.Value != _typeLong;
                    <RadzenDataGridColumn
                        TItem="Dictionary<string, object>"
                        Width="@columnWidth"
                        Title="@column.Key"
                        Type="@_typeString"
                        Filterable="enableFilter"
                        Resizable="true"
                        Property="@GetColumnPropertyExpression(column.Key, column.Value)">
                        <Template>
                            @{
                                var content = column.Value == _typeString ? Format(context[column.Key]?.ToString()) : context[column.Key];
                                if (showZoomIn)
                                {
                                    <RadzenButton Icon="zoom_in" Size="ButtonSize.ExtraSmall" Click="() => OpenDetail(content)"/>
                                }
                                <span>@content</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                }

            </Columns>
        </RadzenDataGrid>

    </RadzenBody>
</RadzenLayout>
@code{

    [Parameter]
    [SupplyParameterFromQuery(Name = "mb")]
    public string SelectedMasterBook { get; set; } = "ActiveSkillMB";

    [Parameter]
    [SupplyParameterFromQuery(Name = "lang")]
    public string SelectedLang { get; set; } = "ZhTw";

    private Dictionary<string, object>[] _data;
    private Dictionary<string, Type> _columns = new();
    private bool _isSideBarExpanded;
    private bool _isTableLoading = true;
    private bool _isLanguageLoading = true;

    private RadzenDataGrid<Dictionary<string, object>> dataGrid;

    private readonly Type _typeObject = typeof(object);
    private readonly Type _typeString = typeof(string);
    private readonly Type _typeLong = typeof(long);
    private readonly Type _typeBool = typeof(bool);
    private readonly Type _typeArray = typeof(object[]);

    private List<string> _masterBooks = new();
    private readonly Dictionary<string, Dictionary<string, object>[]> _masterBookDataCache = new();
    private Dictionary<string, string> _languageMasterBook = new();

    private List<string> _languages = new()
    {
        "EnUs", "JaJp", "KoKr", "ZhTw"
    };

    protected override async Task OnInitializedAsync()
    {
        await InitMasterCatalog();
        await LoadTextResources();
        await MbChanged();
    }

    private async Task LoadTextResources()
    {
        var stopwatch = Stopwatch.StartNew();
        _isLanguageLoading = true;
        await Task.Yield();
        if (!_languages.Contains(SelectedLang))
        {
            SelectedLang = "ZhTw";
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("lang", SelectedLang));
            await Task.Yield();
        }
        var mb = $"TextResource{SelectedLang}MB";
        var masterBook = await GetMasterBook(mb);
        if (masterBook == null || masterBook.Length == 0)
        {
            return;
        }

        _languageMasterBook = masterBook.ToDictionary(d => d["StringKey"].ToString(), d => d["Text"].ToString());
        _isLanguageLoading = false;
        Console.WriteLine($"Executed {nameof(LoadTextResources)} in {stopwatch.ElapsedMilliseconds} ms");
    }

    private string Format(string s)
    {
        if (string.IsNullOrEmpty(s))
        {
            return s;
        }
        if (_languageMasterBook.TryGetValue(s, out var text))
        {
            return text;
        }
        return s;
    }

    private async Task MbChanged(string? selectedMb = null)
    {
        var stopwatch = Stopwatch.StartNew();
        _isTableLoading = true;
        await Task.Yield();

        if (string.IsNullOrEmpty(selectedMb))
        {
            selectedMb = SelectedMasterBook;
        }

        if (!_masterBooks.Contains(selectedMb))
        {
            SelectedMasterBook = "ActiveSkillMB";
            selectedMb = SelectedMasterBook;
        }
        await Task.Yield();
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("mb", selectedMb));

        await Task.Yield();
        var contentData = await GetMasterBook(selectedMb);
        if (contentData == null || contentData.Length == 0) return;

        _columns.Clear();
        foreach (var (key, value) in contentData.First())
        {
            var type = value switch{
                JsonElement{ValueKind: JsonValueKind.Undefined} => _typeString,
                JsonElement{ValueKind: JsonValueKind.Object} => _typeObject,
                JsonElement{ValueKind: JsonValueKind.Array} => _typeArray,
                JsonElement{ValueKind: JsonValueKind.String} => _typeString,
                JsonElement{ValueKind: JsonValueKind.Number} => _typeLong,
                JsonElement{ValueKind: JsonValueKind.False} => _typeBool,
                JsonElement{ValueKind: JsonValueKind.True} => _typeBool,
                JsonElement{ValueKind: JsonValueKind.Null} => _typeString,
                _=>typeof(object)
                };
            _columns.Add(key, type);
        }

        _data = contentData;
        _isTableLoading = false;
        Console.WriteLine($"Executed {nameof(MbChanged)} in {stopwatch.ElapsedMilliseconds} ms");
    }

    private async Task<Dictionary<string, object>[]?> GetMasterBook(string mb)
    {
        if (!_masterBookDataCache.TryGetValue(mb, out var contentData))
        {
            var url = $"/masterbook/{mb}.json";
            var content = await Http.GetStringAsync(url);
            contentData = JsonSerializer.Deserialize<Dictionary<string, object>[]>(content);
            _masterBookDataCache.Add(mb, contentData);
        }

        return contentData;
    }

    private async Task InitMasterCatalog()
    {
        var url = "/masterbook/master-catalog.json";
        var content = await Http.GetStringAsync(url);
        var contentData = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, object>>>(content);
        if (contentData == null)
        {
            return;
        }

        _masterBooks = contentData["MasterBookInfoMap"].Keys.ToList();
    }

    public string GetColumnPropertyExpression(string name, Type type)
    {
        var expression = $@"it[""{name}""].ToString()";

        if (type == typeof(int))
        {
            return $"int.Parse({expression})";
        }
        if (type == typeof(DateTime))
        {
            return $"DateTime.Parse({expression})";
        }

        return expression;
    }

    private void OpenDetail(object detail)
    {
        DialogService.OpenAsync("Detail", ds =>
            @<RadzenCard>
                @((MarkupString) detail.ToString())
            </RadzenCard>
            );
    }
    private async Task LanguageChanged(string lang)
    {
        SelectedLang = lang;
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("lang", lang));
        _isTableLoading = true;
        await LoadTextResources();
        await MbChanged();
        await dataGrid.Reload();
    }

}